/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package entities;

import com.jme3.asset.AssetManager;
import com.jme3.font.BitmapFont;
import com.jme3.font.BitmapFont.Align;
import com.jme3.font.BitmapText;
import com.jme3.font.Rectangle;
import com.jme3.material.Material;
import com.jme3.math.ColorRGBA;
import com.jme3.math.Quaternion;
import com.jme3.math.Transform;
import com.jme3.math.Vector3f;
import com.jme3.renderer.queue.RenderQueue.Bucket;
import com.jme3.scene.Geometry;
import com.jme3.scene.Node;
import logic.level.Level;
import logic.Player;
import solarwars.FontLoader;
import solarwars.IsoCamera;

/**
 *
 * @author Hans
 */
public abstract class AbstractPlanet extends Node {
    
    private static final int SHIP_REFRESH_MULTIPILER = 5;

    private static int PLANET_ID = 0;

    private static int getContiniousID() {
        return PLANET_ID++;
    }
    public static final int SPHERE_Z_SAMPLES = 20;
    public static final int SPHERE_RADIAL_SAMPLES = 20;
    protected AssetManager assetManager;
    protected Geometry geometry;
    protected Material material;
    protected Node transformNode;
    protected float size;
    protected Level level;
    protected int id;
    protected Vector3f position;
    protected BitmapText label;
    protected float shipIncrement;
    protected int ships = 0;
    protected float time;
    protected Player owner;

    public AbstractPlanet(AssetManager assetManager, Level level, Vector3f position, float size) {
        this.id = getContiniousID();
        this.size = size;
        this.level = level;
        this.position = position;
        this.transformNode = new Node("Planet Transform Node " + id);
        this.transformNode.setLocalTranslation(position);
        this.assetManager = assetManager;
        this.owner = null;
        createLabel();

        this.attachChild(transformNode);
        level.getLabelNode().attachChild(label);
        //this.attachChild(label);

    }

    public void createLabel() {
        BitmapFont f = FontLoader.getInstance().getFont("SolarWars32");
        label = new BitmapText(f, false);
        label.setBox(new Rectangle(-3f, 0.15f, 6f, 3f));
        label.setQueueBucket(Bucket.Transparent);
        label.setSize(0.3f);
        label.setColor(ColorRGBA.White);
        label.setText(shipIncrement + "");
        label.setAlignment(Align.Center);
        label.setCullHint(CullHint.Never);

        // algins position of the font
        refreshFont();

        //label.attachChild(new Cross(assetManager));
        // calculate ships generated by the planet 
        // TODO move this to logic
        calculateIncrement();
    }

    private void refreshFont() {
        Vector3f camPos = IsoCamera.getInstance().getCam().getLocation();
        Vector3f fontPos = position.clone();

        Vector3f up = IsoCamera.getInstance().getCam().getUp().clone();
        Vector3f dir = camPos.subtract(fontPos);

        Vector3f left = IsoCamera.getInstance().getCam().getLeft().clone();
        dir.normalizeLocal();
        left.normalizeLocal();
        left.negateLocal();

        Quaternion look = new Quaternion();
        look.fromAxes(left, up, dir);

        Vector3f newPos = dir.clone();
        newPos.normalizeLocal();
        newPos.mult(size);

        newPos = position.add(newPos);

        Transform t = new Transform(newPos, look);

        label.setLocalTransform(t);
    }
    
    public boolean hasOwner() {
        return owner != null;
    }

    public Player getOwner() {
        return owner;
    }

    public void setOwner(Player p) {
        owner = p;
        material.setColor("Specular", owner.getColor());
        material.setColor("Diffuse", ColorRGBA.White);
    }

    public abstract void createPlanet();

    public int getId() {
        return id;
    }

    public float getSize() {
        return size;
    }
    

    public Geometry getGeometry() {
        return geometry;
    }

    public int getShips() {
        return ships;
    }
    
    public void setShipCount(int c) {
        ships = c;
    }
    
    public void decrementShips() {
        ships--;
    }

    public void incrementShips() {
        ships++;
    }
    
    public Vector3f getPosition() {
        return position;
    }

    protected void calculateIncrement() {
        float seed = (4 * size) - 0.6f;
        shipIncrement = (1 - (seed)) + 0.09f;
        if (shipIncrement > 1) {
            shipIncrement = 1;
        }
    }

    public void updateLabel(float tpf) {
        refreshFont();

        time += tpf;
        if (time > SHIP_REFRESH_MULTIPILER * shipIncrement) {
            time = 0;
            ships += 1;
        }

        label.setText(ships + "");
    }
}
